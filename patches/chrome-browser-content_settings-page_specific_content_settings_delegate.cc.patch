diff --git a/chrome/browser/content_settings/page_specific_content_settings_delegate.cc b/chrome/browser/content_settings/page_specific_content_settings_delegate.cc
index ac05c924203d27fa9218a87f84fba502c05e67f5..1fb686abaa295a9c8d54906bce309b24c67a4bb6 100644
--- a/chrome/browser/content_settings/page_specific_content_settings_delegate.cc
+++ b/chrome/browser/content_settings/page_specific_content_settings_delegate.cc
@@ -173,6 +173,7 @@ void GetGuestViewDefaultContentSettingRules(
       ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
       content_settings::ContentSettingToValue(CONTENT_SETTING_BLOCK),
       content_settings::ProviderType::kNone, incognito));
+  BRAVE_GET_GUEST_VIEW_DEFAULT_CONTENT_SETTING_RULES
 }
 #endif
 }  // namespace
@@ -314,4 +315,35 @@ void PageSpecificContentSettingsDelegate::PrimaryPageChanged(
   ClearPendingProtocolHandler();
 }
 
+base::Token PageSpecificContentSettingsDelegate::GetOrCreateFarblingToken(
+    const GURL& primary_url,
+    const GURL& secondary_url) {
+  if (!primary_url.SchemeIsHTTPOrHTTPS()) {
+    return base::Token();
+  }
+
+  LOG(ERROR) << "GetOrCreateFarblingToken " << primary_url << " "
+             << secondary_url;
+  HostContentSettingsMap* map = GetSettingsMap();
+  auto shields_metadata_value = map->GetWebsiteSetting(
+      primary_url, secondary_url, ContentSettingsType::BRAVE_SHIELDS_METADATA);
+  auto* shields_metadata_dict = shields_metadata_value.GetIfDict();
+  if (!shields_metadata_dict) {
+    shields_metadata_value = base::Value(base::Value::Type::DICT);
+    shields_metadata_dict = &shields_metadata_value.GetDict();
+  }
+  base::Token token;
+  if (auto* farbling_token =
+          shields_metadata_dict->FindString("farbling_token")) {
+    token = base::Token::FromString(*farbling_token).value_or(base::Token());
+  } else {
+    token = base::Token::CreateRandom();
+    shields_metadata_dict->Set("farbling_token", token.ToString());
+    map->SetWebsiteSettingDefaultScope(
+        primary_url, secondary_url, ContentSettingsType::BRAVE_SHIELDS_METADATA,
+        std::move(shields_metadata_value));
+  }
+  return token;
+}
+
 }  // namespace chrome
