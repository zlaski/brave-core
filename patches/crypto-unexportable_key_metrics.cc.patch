diff --git a/crypto/unexportable_key_metrics.cc b/crypto/unexportable_key_metrics.cc
index 75a14cebd19b95ff5c8a951031cadf2235df6edc..7460bc7fddd13370fc8c935d88267161170ef494 100644
--- a/crypto/unexportable_key_metrics.cc
+++ b/crypto/unexportable_key_metrics.cc
@@ -23,6 +23,7 @@ enum class KeyType {
 };
 
 const SignatureVerifier::SignatureAlgorithm kAllAlgorithms[] = {
+    BRAVE_ALL_ALGORITHMS
     SignatureVerifier::SignatureAlgorithm::ECDSA_SHA256,
     SignatureVerifier::SignatureAlgorithm::RSA_PKCS1_SHA256,
 };
@@ -116,6 +117,7 @@ internal::TPMSupport MeasureVirtualTpmOperations() {
   if (algo) {
     switch (*algo) {
       case SignatureVerifier::SignatureAlgorithm::ECDSA_SHA256:
+      BRAVE_MEASURE_VIRTUAL_TMP_OPERATIONS
         supported_virtual_algo = internal::TPMSupport::kECDSA;
         break;
       case SignatureVerifier::SignatureAlgorithm::RSA_PKCS1_SHA256:
@@ -195,6 +197,7 @@ void MeasureTpmOperationsInternal(UnexportableKeyProvider::Config config) {
   if (algo) {
     switch (*algo) {
       case SignatureVerifier::SignatureAlgorithm::ECDSA_SHA256:
+      BRAVE_MEASURE_TMP_OPERATIONS_INTERNAL
         supported_algo = internal::TPMSupport::kECDSA;
         break;
       case SignatureVerifier::SignatureAlgorithm::RSA_PKCS1_SHA256:
@@ -296,6 +299,7 @@ std::string AlgorithmToString(SignatureVerifier::SignatureAlgorithm algorithm) {
     case SignatureVerifier::SignatureAlgorithm::RSA_PSS_SHA256:
       return "RSA";
     case SignatureVerifier::SignatureAlgorithm::ECDSA_SHA256:
+    BRAVE_UNEXPORTED_KEY_METRICS_ALGORITHM_TO_STRING
       return "ECDSA";
   }
 }
